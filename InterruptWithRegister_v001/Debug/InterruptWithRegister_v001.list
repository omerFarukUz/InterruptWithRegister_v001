
InterruptWithRegister_v001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000042c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005d8  080005d8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005d8  080005d8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005d8  080005d8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d8  080005d8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d8  080005d8  000105d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005dc  080005dc  000105dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005e0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001a75  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000550  00000000  00000000  00021aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000208  00000000  00000000  00022040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000016f  00000000  00000000  00022248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000232fc  00000000  00000000  000223b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002586  00000000  00000000  000456b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8640  00000000  00000000  00047c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000654  00000000  00000000  0012027c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001208d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080005c0 	.word	0x080005c0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	080005c0 	.word	0x080005c0

080001ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	db0b      	blt.n	8000216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	f003 021f 	and.w	r2, r3, #31
 8000204:	4907      	ldr	r1, [pc, #28]	; (8000224 <__NVIC_EnableIRQ+0x38>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	095b      	lsrs	r3, r3, #5
 800020c:	2001      	movs	r0, #1
 800020e:	fa00 f202 	lsl.w	r2, r0, r2
 8000212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000e100 	.word	0xe000e100

08000228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	6039      	str	r1, [r7, #0]
 8000232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000238:	2b00      	cmp	r3, #0
 800023a:	db0a      	blt.n	8000252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	b2da      	uxtb	r2, r3
 8000240:	490c      	ldr	r1, [pc, #48]	; (8000274 <__NVIC_SetPriority+0x4c>)
 8000242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000246:	0112      	lsls	r2, r2, #4
 8000248:	b2d2      	uxtb	r2, r2
 800024a:	440b      	add	r3, r1
 800024c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000250:	e00a      	b.n	8000268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	b2da      	uxtb	r2, r3
 8000256:	4908      	ldr	r1, [pc, #32]	; (8000278 <__NVIC_SetPriority+0x50>)
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	f003 030f 	and.w	r3, r3, #15
 800025e:	3b04      	subs	r3, #4
 8000260:	0112      	lsls	r2, r2, #4
 8000262:	b2d2      	uxtb	r2, r2
 8000264:	440b      	add	r3, r1
 8000266:	761a      	strb	r2, [r3, #24]
}
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	e000e100 	.word	0xe000e100
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <RCC_Config>:
#include "main.h"

int x=0;

void RCC_Config()
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
	RCC->CR |= 0x30000; 			  // HSEON and HSEONRDY enable
 8000280:	4b24      	ldr	r3, [pc, #144]	; (8000314 <RCC_Config+0x98>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a23      	ldr	r2, [pc, #140]	; (8000314 <RCC_Config+0x98>)
 8000286:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800028a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & 0x20000));      // HSEON Ready Flag wait
 800028c:	bf00      	nop
 800028e:	4b21      	ldr	r3, [pc, #132]	; (8000314 <RCC_Config+0x98>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0f9      	beq.n	800028e <RCC_Config+0x12>
	RCC->CR |= 0x80000;				  // CSS enable
 800029a:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <RCC_Config+0x98>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a1d      	ldr	r2, [pc, #116]	; (8000314 <RCC_Config+0x98>)
 80002a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002a4:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x400000; 		  // PLL e HSE sectik
 80002a6:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <RCC_Config+0x98>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	4a1a      	ldr	r2, [pc, #104]	; (8000314 <RCC_Config+0x98>)
 80002ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b0:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x000004; 		  // PLL M = 4
 80002b2:	4b18      	ldr	r3, [pc, #96]	; (8000314 <RCC_Config+0x98>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	4a17      	ldr	r2, [pc, #92]	; (8000314 <RCC_Config+0x98>)
 80002b8:	f043 0304 	orr.w	r3, r3, #4
 80002bc:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x005A00; 		  // PLL N=168
 80002be:	4b15      	ldr	r3, [pc, #84]	; (8000314 <RCC_Config+0x98>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	4a14      	ldr	r2, [pc, #80]	; (8000314 <RCC_Config+0x98>)
 80002c4:	f443 43b4 	orr.w	r3, r3, #23040	; 0x5a00
 80002c8:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x000000; 		  // PLL P=2
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <RCC_Config+0x98>)
 80002cc:	4a11      	ldr	r2, [pc, #68]	; (8000314 <RCC_Config+0x98>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 0x000000; 		 	  // AHB Prescaler = 1
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <RCC_Config+0x98>)
 80002d4:	4a0f      	ldr	r2, [pc, #60]	; (8000314 <RCC_Config+0x98>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x080000; 		  	  // APB2 Prescaler = 2
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <RCC_Config+0x98>)
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <RCC_Config+0x98>)
 80002e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002e4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x001400; 		  	  // APB1 Presclaer = 4
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <RCC_Config+0x98>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <RCC_Config+0x98>)
 80002ec:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002f0:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x00080000;			  // HSERDY Flag Clear
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <RCC_Config+0x98>)
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	4a07      	ldr	r2, [pc, #28]	; (8000314 <RCC_Config+0x98>)
 80002f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002fc:	60d3      	str	r3, [r2, #12]
	RCC->CIR |= 0x00800000;			  // CSS Flag Clear
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <RCC_Config+0x98>)
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <RCC_Config+0x98>)
 8000304:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000308:	60d3      	str	r3, [r2, #12]

}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40023800 	.word	0x40023800

08000318 <GPIO_Config>:

void GPIO_Config()
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0x0F;            // GPIOA,GPIOB,GPIOC and GPIOD active
 800031c:	4b12      	ldr	r3, [pc, #72]	; (8000368 <GPIO_Config+0x50>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000320:	4a11      	ldr	r2, [pc, #68]	; (8000368 <GPIO_Config+0x50>)
 8000322:	f043 030f 	orr.w	r3, r3, #15
 8000326:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB->MODER |= 0x10004001;		 // GPIOB port pin 14-7-0 choose output mode
 8000328:	4b10      	ldr	r3, [pc, #64]	; (800036c <GPIO_Config+0x54>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	490f      	ldr	r1, [pc, #60]	; (800036c <GPIO_Config+0x54>)
 800032e:	4b10      	ldr	r3, [pc, #64]	; (8000370 <GPIO_Config+0x58>)
 8000330:	4313      	orrs	r3, r2
 8000332:	600b      	str	r3, [r1, #0]
	GPIOB->OTYPER |= 0x00;			 // GPIOB choose push-pull
 8000334:	4b0d      	ldr	r3, [pc, #52]	; (800036c <GPIO_Config+0x54>)
 8000336:	4a0d      	ldr	r2, [pc, #52]	; (800036c <GPIO_Config+0x54>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= 0x20008002;    // GPIOB port pin 14-7-0 choose high speed mode
 800033c:	4b0b      	ldr	r3, [pc, #44]	; (800036c <GPIO_Config+0x54>)
 800033e:	689a      	ldr	r2, [r3, #8]
 8000340:	490a      	ldr	r1, [pc, #40]	; (800036c <GPIO_Config+0x54>)
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <GPIO_Config+0x5c>)
 8000344:	4313      	orrs	r3, r2
 8000346:	608b      	str	r3, [r1, #8]
	GPIOB->PUPDR |= 0x20008002;      // GPIOB port pin 14-7-0 choose pull down mode
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <GPIO_Config+0x54>)
 800034a:	68da      	ldr	r2, [r3, #12]
 800034c:	4907      	ldr	r1, [pc, #28]	; (800036c <GPIO_Config+0x54>)
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <GPIO_Config+0x5c>)
 8000350:	4313      	orrs	r3, r2
 8000352:	60cb      	str	r3, [r1, #12]
	GPIOC->MODER |= 0x00;			 // GPIOC port choose input
 8000354:	4b08      	ldr	r3, [pc, #32]	; (8000378 <GPIO_Config+0x60>)
 8000356:	4a08      	ldr	r2, [pc, #32]	; (8000378 <GPIO_Config+0x60>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	6013      	str	r3, [r2, #0]

}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40023800 	.word	0x40023800
 800036c:	40020400 	.word	0x40020400
 8000370:	10004001 	.word	0x10004001
 8000374:	20008002 	.word	0x20008002
 8000378:	40020800 	.word	0x40020800

0800037c <EXTI_Config>:

void EXTI_Config()
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= 0x4000;			 //SYSCFG active (EXTI)
 8000380:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <EXTI_Config+0x54>)
 8000382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000384:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <EXTI_Config+0x54>)
 8000386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800038a:	6453      	str	r3, [r2, #68]	; 0x44

	SYSCFG->EXTICR[3] |= 0x20;		 //SYSCFG external interrupt configuration register 4 (C Port is activated) EXTI Line
 800038c:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <EXTI_Config+0x58>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	4a10      	ldr	r2, [pc, #64]	; (80003d4 <EXTI_Config+0x58>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[0] |= 0x00;       // EXTI[0] Line A port is activated(EXTI0 and EXTI1)
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <EXTI_Config+0x58>)
 800039a:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <EXTI_Config+0x58>)
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	6093      	str	r3, [r2, #8]

	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003a0:	2028      	movs	r0, #40	; 0x28
 80003a2:	f7ff ff23 	bl	80001ec <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);
 80003a6:	2006      	movs	r0, #6
 80003a8:	f7ff ff20 	bl	80001ec <__NVIC_EnableIRQ>

	NVIC_SetPriority(EXTI15_10_IRQn , 0);
 80003ac:	2100      	movs	r1, #0
 80003ae:	2028      	movs	r0, #40	; 0x28
 80003b0:	f7ff ff3a 	bl	8000228 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI0_IRQn , 1);
 80003b4:	2101      	movs	r1, #1
 80003b6:	2006      	movs	r0, #6
 80003b8:	f7ff ff36 	bl	8000228 <__NVIC_SetPriority>

	EXTI->IMR = 0x2003;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <EXTI_Config+0x5c>)
 80003be:	f242 0203 	movw	r2, #8195	; 0x2003
 80003c2:	601a      	str	r2, [r3, #0]
	EXTI->RTSR = 0x2003;
 80003c4:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <EXTI_Config+0x5c>)
 80003c6:	f242 0203 	movw	r2, #8195	; 0x2003
 80003ca:	609a      	str	r2, [r3, #8]

}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40023800 	.word	0x40023800
 80003d4:	40013800 	.word	0x40013800
 80003d8:	40013c00 	.word	0x40013c00

080003dc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
	if(EXTI->PR & 0x2000)
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <EXTI15_10_IRQHandler+0x2c>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <EXTI15_10_IRQHandler+0x16>
	{
		GPIOB->ODR = 0x0001;
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <EXTI15_10_IRQHandler+0x30>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	615a      	str	r2, [r3, #20]


	}

	EXTI->PR |= (0x1 << 13U);
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <EXTI15_10_IRQHandler+0x2c>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a04      	ldr	r2, [pc, #16]	; (8000408 <EXTI15_10_IRQHandler+0x2c>)
 80003f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003fc:	6153      	str	r3, [r2, #20]

}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	40013c00 	.word	0x40013c00
 800040c:	40020400 	.word	0x40020400

08000410 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	if(EXTI->PR & 0x0001)
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <EXTI0_IRQHandler+0x2c>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d002      	beq.n	8000426 <EXTI0_IRQHandler+0x16>
	{
		GPIOB->ODR = 0x0080;
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <EXTI0_IRQHandler+0x30>)
 8000422:	2280      	movs	r2, #128	; 0x80
 8000424:	615a      	str	r2, [r3, #20]


	}

	EXTI->PR |= (0x1 << 0U);
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <EXTI0_IRQHandler+0x2c>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	4a04      	ldr	r2, [pc, #16]	; (800043c <EXTI0_IRQHandler+0x2c>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6153      	str	r3, [r2, #20]

}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40013c00 	.word	0x40013c00
 8000440:	40020400 	.word	0x40020400

08000444 <main>:



int main(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0

  RCC_Config();
 8000448:	f7ff ff18 	bl	800027c <RCC_Config>
  GPIO_Config();
 800044c:	f7ff ff64 	bl	8000318 <GPIO_Config>
  EXTI_Config();
 8000450:	f7ff ff94 	bl	800037c <EXTI_Config>


  while (1)
  {
	  x++;
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <main+0x34>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	3301      	adds	r3, #1
 800045a:	4a07      	ldr	r2, [pc, #28]	; (8000478 <main+0x34>)
 800045c:	6013      	str	r3, [r2, #0]
	  if(x>1000000) {
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <main+0x34>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a06      	ldr	r2, [pc, #24]	; (800047c <main+0x38>)
 8000464:	4293      	cmp	r3, r2
 8000466:	ddf5      	ble.n	8000454 <main+0x10>

		  GPIOB->ODR = 0x00;
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <main+0x3c>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
		  x=0;
 800046e:	4b02      	ldr	r3, [pc, #8]	; (8000478 <main+0x34>)
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
	  x++;
 8000474:	e7ee      	b.n	8000454 <main+0x10>
 8000476:	bf00      	nop
 8000478:	20000020 	.word	0x20000020
 800047c:	000f4240 	.word	0x000f4240
 8000480:	40020400 	.word	0x40020400

08000484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000488:	e7fe      	b.n	8000488 <NMI_Handler+0x4>

0800048a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048e:	e7fe      	b.n	800048e <HardFault_Handler+0x4>

08000490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000494:	e7fe      	b.n	8000494 <MemManage_Handler+0x4>

08000496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049a:	e7fe      	b.n	800049a <BusFault_Handler+0x4>

0800049c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <UsageFault_Handler+0x4>

080004a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d0:	f000 f83e 	bl	8000550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <SystemInit+0x20>)
 80004de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004e2:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <SystemInit+0x20>)
 80004e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000534 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000500:	f7ff ffea 	bl	80004d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000506:	490d      	ldr	r1, [pc, #52]	; (800053c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800051c:	4c0a      	ldr	r4, [pc, #40]	; (8000548 <LoopFillZerobss+0x22>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800052a:	f000 f825 	bl	8000578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800052e:	f7ff ff89 	bl	8000444 <main>
  bx  lr    
 8000532:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000534:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000540:	080005e0 	.word	0x080005e0
  ldr r2, =_sbss
 8000544:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000548:	20000028 	.word	0x20000028

0800054c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC_IRQHandler>
	...

08000550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <HAL_IncTick+0x20>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	461a      	mov	r2, r3
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_IncTick+0x24>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4413      	add	r3, r2
 8000560:	4a04      	ldr	r2, [pc, #16]	; (8000574 <HAL_IncTick+0x24>)
 8000562:	6013      	str	r3, [r2, #0]
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000000 	.word	0x20000000
 8000574:	20000024 	.word	0x20000024

08000578 <__libc_init_array>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	4d0d      	ldr	r5, [pc, #52]	; (80005b0 <__libc_init_array+0x38>)
 800057c:	4c0d      	ldr	r4, [pc, #52]	; (80005b4 <__libc_init_array+0x3c>)
 800057e:	1b64      	subs	r4, r4, r5
 8000580:	10a4      	asrs	r4, r4, #2
 8000582:	2600      	movs	r6, #0
 8000584:	42a6      	cmp	r6, r4
 8000586:	d109      	bne.n	800059c <__libc_init_array+0x24>
 8000588:	4d0b      	ldr	r5, [pc, #44]	; (80005b8 <__libc_init_array+0x40>)
 800058a:	4c0c      	ldr	r4, [pc, #48]	; (80005bc <__libc_init_array+0x44>)
 800058c:	f000 f818 	bl	80005c0 <_init>
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	10a4      	asrs	r4, r4, #2
 8000594:	2600      	movs	r6, #0
 8000596:	42a6      	cmp	r6, r4
 8000598:	d105      	bne.n	80005a6 <__libc_init_array+0x2e>
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a0:	4798      	blx	r3
 80005a2:	3601      	adds	r6, #1
 80005a4:	e7ee      	b.n	8000584 <__libc_init_array+0xc>
 80005a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005aa:	4798      	blx	r3
 80005ac:	3601      	adds	r6, #1
 80005ae:	e7f2      	b.n	8000596 <__libc_init_array+0x1e>
 80005b0:	080005d8 	.word	0x080005d8
 80005b4:	080005d8 	.word	0x080005d8
 80005b8:	080005d8 	.word	0x080005d8
 80005bc:	080005dc 	.word	0x080005dc

080005c0 <_init>:
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	bf00      	nop
 80005c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c6:	bc08      	pop	{r3}
 80005c8:	469e      	mov	lr, r3
 80005ca:	4770      	bx	lr

080005cc <_fini>:
 80005cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ce:	bf00      	nop
 80005d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d2:	bc08      	pop	{r3}
 80005d4:	469e      	mov	lr, r3
 80005d6:	4770      	bx	lr
